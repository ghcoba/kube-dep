---

# file: create-kubelet-bootstrap-config.yml
#

# generate kubelet bootstrap config file 
#   (set cluster, credential, context, and default context)
#
# copy to ansible backup
# copy to kube config dir

# generate kubelet bootstrap config file
- name: generate scheduler config - set cluster
  command: >
    "{{ bin_path }}"/kubectl config set-cluster kubernetes
      --certificate-authority="{{ kube_ca_file }}" 
      --embed-certs=true 
      --server="{{ kube_load_balancer_apiserver_url }}"
      --kubeconfig="{{ kubelet_bootstrap_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kubelet bootstrap config - set credential
  command: >
    "{{ bin_path }}"/kubectl config set-credentials system:bootstrap:"{{ tls_bootstrap_token_id }}" 
      --token="{{ tls_bootstrap_token }}"
      --kubeconfig="{{ kubelet_bootstrap_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kubelet bootstrap config - set context
  command: >
    "{{ bin_path }}"/kubectl config set-context default
      --cluster=kubernetes
      --user=system:bootstrap:"{{ tls_bootstrap_token_id }}"
      --kubeconfig="{{ kubelet_bootstrap_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kubelet bootstrap config - set context
  command: >
    "{{ bin_path }}"/kubectl config set-context system:nodes
      --cluster=kubernetes
      --user=system:node:"{{ inventory_hostname }}"
      --kubeconfig="{{ kubelet_bootstrap_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kubelet bootstrap config - set context
  command: >
    "{{ bin_path }}"/kubectl config set-context system:bootstrap:nodes
      --cluster=kubernetes
      --user=system:node:"{{ inventory_hostname }}"
      --kubeconfig="{{ kubelet_bootstrap_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kube scheduler config - set default context
  command: >
    "{{ bin_path }}"/kubectl config use-context default 
      --kubeconfig="{{ kubelet_bootstrap_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

# change kube config file attribute
- name: change file attrib
  file:
    path: "{{ kubelet_bootstrap_config_file }}"
    owner: "{{ kube_user }}"
    group: "{{ kube_group }}"
    mode: 0640

# copy kube config file to ansible backup directory
- name: fetch kubelet bootstrap config file to ansible backup directory
  fetch:
    src: "{{ kube_config_path }}/{{ item }}"
    dest: "{{ dep_path_backup_kube_config }}/{{ inventory_hostname }}/{{ item }}"
    flat: yes
  with_items:
    - kubelet-bootstrap.kubeconfig
