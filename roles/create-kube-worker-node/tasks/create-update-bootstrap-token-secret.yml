---

# file: create-update-bootstrap-token-secret.yml
#

#   generate bootstrap token secret yaml file

- name: get expiration time for bootstrap token
  command: "date +'%Y-%m-%dT%H:%M:%SZ' -d '+365 days'"
# register current time variable for calculating expiration - expire in 365 days
  register: tls_bootstrap_token_expiration

- name: generate tls bootstrap token secret file on kube cache
  template:
    src: tls-bootstrap-token.yaml.j2
    dest: "{{tls_bootstrap_token_secret_file }}"

##############################################################################################

# create bootstrap secret ( store in etcd ) for bootstrappers to create kubelet boot strap csr

# generate kube config file for every master node
#  command: >
#  #  /usr/local/bin/kubectl create -f /etc/kubernetes/tls-bootstrap-token.yaml
#

- block:

    - name: check kubelet bootstrap token existense
      command: "{{ bin_path }}/kubectl get secret bootstrap-token-{{ tls_bootstrap_token_id }} -n kube-system"
      register: secret_kubeletbootstrap_get_result

  rescue:
    - debug:
        msg: >
          - "1. get. stderr out: {{ secret_kubeletbootstrap_get_result.stderr_lines }}"
          - "1. update.  stdout: {{ secret_kubeletbootstrap_get_result.stdout }}"
          -  "error occured during check bootstrap token secret existence. it seems  kubeletstrap token secret bootstrap-token-{{ tls_bootstrap_token_id }} not exist. continue to create bootstrap token secret ..."

#   create bootstrap secret
    - name: generate bootstrap token secret
      command: "{{ bin_path }}/kubectl create -f {{ tls_bootstrap_token_secret_file }}"
      register: kubeletbootstrap_get_result_b

    - debug:
        msg: >
          - "apply stderr out: {{ kubeletbootstrap_get_result_b.stderr_lines }}"
          - "apply stdout    : {{ kubeletbootstrap_get_result_b.stdout }}"
          - "exit from rbac role creating. check rbac role existence again ..."

    - name: check bootstrap token secret
      command: "{{ bin_path }}/kubectl get secret bootstrap-token-{{ tls_bootstrap_token_id }} -n kube-system"
      register: rbac_kubeletbootstrap_get_result_c

  always:
    - debug:
        msg: "please check if bootstrap token secret havs been created. using command line: # kubectl get secret bootstrap-token-{{ tls_bootstrap_token_id }}"

    - debug:
        msg: "will continue ..."
