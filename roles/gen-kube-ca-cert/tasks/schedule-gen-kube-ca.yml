---

# file: schedule-gen-kube-ca.yml
#

# func:
#   0. check root cache directory ( /etc/cert-cache ) on remote (use ansible machine - node #0 of ansible-nodes group)
#        end play when main cache directory exist
#   1. check kube cache directory (/etc/cert-cache/kubernetes) on remote
#   2. create cach directory and then schedule generating kube , if cache dir not exist
#       skip generating kube ca, if cache dir exist
#
# scheduled proc:
#   . copy root ca-config ca-config json file to node #0 of ansible-nodes group
#   . copy root ca.pem and ca-key.pem to node #0 of ansible-nodes
#   . 
#   . create *-csr.json file for *= kube-apiserver, kube-controller-manager, kube-scheduler,
#       kube-admin, kube-proxy   
#       by using script and generate kube ca cert using cfssl utility
#   . create bootstrap toke files (token.csv - will not use now, tls-bootstrap-token.yaml - will also not use now)
#   . populate ca cert and config file to its dedicated cache directory from kube cache dir
#   . fetch all config/json/csr/ca/cert files and copy back to ansible deploy site as backup
#  ref:
#   . check /etc/cert-cache/kubernetes directory exist
#

########################################################################################

# 0.0
# check environmental status
#######################################

# check cert-cache dir exist
- name: check cert-cache directory exist
  stat:
    path: "{{ cert_cache_path }}"
  register: cert_cache_path_exist_result
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"

- name: check cert-cache ca directory exist
  stat:
    path: "{{ cert_cache_path_ca }}"
  register: cert_cache_path_ca_exist_result
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"

- name: check cert-cache ca-config directory exist
  stat:
    path: "{{ cert_cache_path_ca_config }}"
  register: cert_cache_path_ca_config_exist_result
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"

#- name: check cert-cache front proxy client ca directory exist
#  stat:
#    path: "{{ cert_cache_path_kube_front_proxy_client_ca }}"
#  register: cert_cache_path_kube_front_proxy_client_ca_exist_result
#  run_once: true
#  delegate_to: "{{ groups['ansible-nodes'][0] }}"

# exit if false condition

###########
###########
# exit play when cert-cache dir not exist
- block:
    - name: end play if cer-cache dir not exist
      debug:
        msg: "ca-config, ca or cert-cache directory not exist, ending play"
    - meta: end_play
  when: ( cert_cache_path_exist_result.stat.exists == false ) or ( cert_cache_path_ca_exist_result.stat.exists == false ) or ( cert_cache_path_ca_config_exist_result.stat.exists == false ) 

#or ( cert_cache_path_kube_front_proxy_client_ca_exist_result.stat.exists == false )
##########
##########

# or continue to go

# check kubernetes cert cache dir (/etc/cert-cache/kubernetes) exist
- name: check kubernetes cert cache directory exist
  stat:
    path: "{{ cert_cache_path_kubernetes }}/"
  register: cert_cache_path_kubernetes_exist_result
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"

#- debug:
#    msg: "{{ cert_cache_path_kubernetes_exist_result }}"

# prompt check result
- name: prompt cache kubernetes directory exist result - not exist
  debug:
    msg: "cache kubernetes directory not exist. will continue to generate kube ca cert..."
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"
  when: cert_cache_path_kubernetes_exist_result.stat.exists == false
# prompt check result
- name: prompt cache kubernetes directory exist result - exist
  debug:
    msg: "cache kubernetes directory already exist. will exit generating kube ca cert."
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"
  when: cert_cache_path_kubernetes_exist_result.stat.exists == true


# 0.1
# pre procedure - create cert cache directory
#######################################################

# create cache kube directories for kube cert (for generated) if cache dir not exist
- name: create kube directories
  file:
    path: "{{ item }}/"
    state: directory
    force: yes
    mode: 01755
    owner: root
    group: root
  with_items:
    - "{{ cert_cache_path_kubernetes }}"
    - "{{ cert_cache_path_kube_admin }}"
    - "{{ cert_cache_path_kube_apiserver }}"
    - "{{ cert_cache_path_kube_controller_manager }}"
    - "{{ cert_cache_path_kube_scheduler }}"
    - "{{ cert_cache_path_kube_proxy }}"
    - "{{ cert_cache_path_kube_serviceaccount }}"
    - "{{ cert_cache_path_kube_front_proxy_client }}"
    - "{{ cert_cache_path_kube_metrics_server }}"
    - "{{ cert_cache_path_kube_aggregated_apiserver_client }}"
#  register: kube_dir_create_result
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"
  when: cert_cache_path_kubernetes_exist_result.stat.exists == false

#- debug:
#    msg: "{{ kube_dir_create_result }}"

# schedule to:
#  copy root ca-config files, root ca, root ca-key to kube dirs
#  generate kube ca cert (copy csr or gen csr using script, and gen ca cert using cfssl)
#  fetch cert files from cache diretory on remote machine and backup to ansible machine


# 0.2
# pre procedure - copy files to remote kube cache directory
##########################################################

- name: exec copy ca-config, ca.pem, ca-key.pem file to remote kube cache
  import_tasks: copy-root-ca-to-cache.yml
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"
  when: cert_cache_path_kubernetes_exist_result.stat.exists == false


###########################################################################################

# 1.0
# generate csr and cert - exec create csr and generate ca cert 
##############################################################

- name: exec generate kube ca cert
  import_tasks: gen-kube-ca-cert.yml
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"
  when: cert_cache_path_kubernetes_exist_result.stat.exists == false

##########################################################################################

# 2.0
# post procedure - exec populate ca cert files to admin, 
#   apiserver, controller-manger, scheduler, proxy dirs
##########################################################

- name: exec populate ca cert files from kube cache
  import_tasks: populate-ca-cert-from-kube-cache.yml
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"
  when: cert_cache_path_kubernetes_exist_result.stat.exists == false

# 2.1
# post procedure - exec fetch cert files from 
#   remote cache and copy back to ansible machine
##########################################################

- name: exec fetch kube ca cert files from cache and back copy to ansible machine
  import_tasks: fetch-back-kube-ca-cert.yml
  run_once: true
  delegate_to: "{{ groups['ansible-nodes'][0] }}"
  when: cert_cache_path_kubernetes_exist_result.stat.exists == false
  
