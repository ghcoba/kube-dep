# metrics-server.yaml
#
#


# cluster role - system:aggregated-metrics-reader
#
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:aggregated-metrics-reader
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]


---
# cluster role binding - metrics-server:system:auth-delegator
#
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system


---
# role binding - metrics-server-auth-reader
#
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system


---
# apiservice - v1beta1.metrics.k8s.io
#
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
spec:
  service:
    name: metrics-server
    namespace: kube-system
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100


---
# service account - metrics-server
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system


---
# deployment - metrics-server
#
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      name: metrics-server
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: metrics-server
      hostNetwork: true
      containers:
      - name: metrics-server
        image: k8s.gcr.io/metrics-server-amd64:v0.3.1
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        command:
          - /metrics-server
          - --v=2
          #
          #   metric resolution (duration in seconds, the interval at which metrics will be scraped from kubelet)
          - --metric-resolution={{ metrics_server_metric_resolution }}
          #
          #   secure port of metrics server for apiserver to connect to
          #   secure port - use default port 443. use port other than default port if not as root user
          #   default metrics-server secure listen port - 443
          - --secure-port={{ metrics_server_secure_port }}
          #
          #   kubelet metric traffic port - kubelet server port for metrics server to connect to as client
          #   default kubelet secure port - 10250
          - --kubelet-port={{ metrics_server_kubelet_port }}
          #
          #   kubelet address type preferred in sequence
          - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
          #
          #   client-CA - certification authority to certificate the client tls traffic 
          #               ( which the client cert is signed by)
          - --requestheader-client-ca-file={{ metrics_server_client_ca_file }}
          #
          #   metrics serverk certification (server type cert)
          #   (if not specified, metrics server will generate self-certified certificates. 
          #    do not use self-certified certificates in production enviroment)
          - --tls-cert-file={{ metrics_server_tls_cert_file }}
          - --tls-private-key-file={{ metrics_server_tls_private_key_file }}
          #
          #   allowed client name - it is retrieved from client cert CN (for apiserver to access metrics server)
          - --requestheader-allowed-names="kube-aggregated-apiserver-client"
          #
          #   headers prefix, username, and group from apiserver to metrics server for user authorization check
          - --requestheader-group-headers=X-Remote-Group
          - --requestheader-extra-headers-prefix=X-Remote-Extra-
          - --requestheader-username-headers=X-Remote-User
          #
          #
          ################# 
          #- --kubelet-insecure-tls
          #- --tls-cert-file=/etc/kubernetes/cert/front-proxy-client.pem
          #- --tls-private-key-file=/etc/kubernetes/cert/front-proxy-client-key.pem
        volumeMounts:
        - name: front-proxy-client-ca-dir
          mountPath: /etc/kubernetes/cert
        - name: tmp-dir
          mountPath: /tmp
      volumes:
      # mount in tmp so we can safely use from-scratch images and/or read-only containers
      - name: tmp-dir
        emptyDir: {}
      - name: front-proxy-client-ca-dir
        hostPath:
          #path: /etc/kubernetes/cert
          path: {{ kube_cert_path }}

---
# service - metrics-server
#
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    kubernetes.io/name: "Metrics-server"
spec:
  selector:
    k8s-app: metrics-server
  ports:
  - port: 443
    protocol: TCP
    targetPort: 443


---
# cluster role - system:metrics-server
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - nodes/stats
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  resources:
  - deployments
  verbs:
  - get
  - list
  - update
  - watch

---
# cluster role binding - system:metrics-server
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system


---
# cluster role binding - user ( kube-aggregated-apiserver-client )
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: user-kube-aggregated-apiserver-client
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: User
  apiGroup: rbac.authorization.k8s.io
  name: kube-aggregated-apiserver-client


---
# cluster role binding - kubelet-api-asmin
#
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubelet-api-admin
subjects:
- kind: User
  name: kubelet-api
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: system:kubelet-api-admin
  apiGroup: rbac.authorization.k8s.io
