{% macro initial_cluster() -%}
{% for host in groups['etcd-nodes'] -%}
   https://{{ hostvars[host]['etcd_machine_address'] }}:{{ etcd_client_port }}
  {%- if not loop.last -%},{%- endif -%}
{%- endfor -%}
{% endmacro -%}

{% macro initial_lb() -%}
{% for host in groups['load-balancer'] -%}
  {{ hostvars[host]['load_balancer_machine_address'] }}
  {%- if not loop.last -%},{%- endif -%}
{%- endfor -%}
{% endmacro -%}

{% macro get_host_ip() -%}
   {{ hostvars[inventory_hostname]['host_ip_address'] }}
{%- endmacro -%}


[Unit]
Description=kubernetes apiserver service - kube-apiserver.service
After=network.target
# After=etcd.service

[Service]
User={{ kube_user }}
PermissionsStartOnly=yes
ExecStartPre=/usr/bin/mkdir -p /var/run/kubernetes
ExecStartPre=/usr/bin/chown kube.kube /var/run/kubernetes

EnvironmentFile=-/etc/kubernetes/apiserver

ExecStart=/usr/bin/kube-apiserver \
  --alsologtostderr=false \
  --logtostderr=true \
  --v=2 \
  --log-dir={{ kube_log_path }} \
  --log-file={{ kube_log_path }}/kube-apiserver.log \
  \
  --apiserver-count={{ apiserver_node_count }} \
  \
  --advertise-address={{ get_host_ip() }} \
  --bind-address={{ kube_apiserver_secure_bind_address }} \
  --secure-port={{ kube_apiserver_secure_port }} \
  --insecure-bind-address={{ kube_apiserver_insecure_bind_address }} \
  --insecure-port={{ kube_apiserver_insecure_port }} \
  --service-cluster-ip-range={{ cluster_service_cidr }} \
  --service-node-port-range={{ service_port_range }} \
  \
  --allow-privileged=true \
  --runtime-config=api/all \
  \
  --authorization-mode=Node,ABAC,RBAC \
  --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,NodeRestriction \
  --feature-gates=TokenRequest=true \
  --anonymous-auth=false \
  --authorization-policy-file={{ kube_abac_config_path }}/abac-auth.json \
  \
  --tls-cert-file={{ kube_apiserver_cert_file }} \
  --tls-private-key-file={{ kube_apiserver_key_file }} \
  \
  --client-ca-file={{ kube_ca_file }} \
  \
  --kubelet-certificate-authority={{ kube_ca_file }} \
  --kubelet-client-certificate={{ kube_apiserver_client_cert_file }} \
  --kubelet-client-key={{ kube_apiserver_client_key_file }} \
  --kubelet-https=true \
  \
  --enable-bootstrap-token-auth=false \
  \
  --service-account-key-file={{ kube_serviceaccount_cert_file }} \
  \
  --storage-backend=etcd3 \
  --etcd-servers={{ initial_cluster() }} \
  --etcd-cafile={{ kube_etcd_ca_file }} \
  --etcd-certfile={{ kube_etcd_cert_file }} \
  --etcd-keyfile={{ kube_etcd_key_file }} \
  \
  --requestheader-client-ca-file={{ kube_ca_file }} \
  --proxy-client-cert-file={{ kube_aggregated_apiserver_client_cert_file }} \
  --proxy-client-key-file={{ kube_aggregated_apiserver_client_key_file }} \
  --requestheader-allowed-names="kube-aggregated-apiserver-client" \
  --requestheader-group-headers=X-Remote-Group \
  --requestheader-extra-headers-prefix=X-Remote-Extra- \
  --requestheader-username-headers=X-Remote-User \
  \
  --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP \
  --enable-aggregator-routing=true \
  \
  --event-ttl=1h \
  \
  --enable-swagger-ui=true \
  \
  --audit-policy-file={{ audit_policy_config_file }} \
  --audit-log-maxage=7 \
  --audit-log-maxbackup=3 \
  --audit-log-maxsize=10 \
  --audit-log-path={{ kube_log_path }}/audit.log


# remark: CA and cert
#
# 1. apiserver cert (server cert):
#   --tls-cert-file= (signed by root CA, for kubernetes apiserver, cert type: server)
#   --tls-private-key-file=
#
# 2. kubelet cert (client) for apiserver to access kubelet server as client
#  --kubelet-certificate-authority= (use root CA - ca.pem as client(all client) certificate authority )
#  --kubelet-client-certificate=(signed by root CA, for kubernetes apiserver to access kubelet server as client, cert type: client)
#    # if assigned, use https to connect with kubelet api.
#    #  need create rba for cert user/group (here user is 'kubernetes' in CN of cert file) to have access rights. or, system
#       will prompt error of unauthorized
#  --kubelet-client-key=
#  --kubelet-https=true (indicate kubelet server will use tls https for communication)
#
# 3. client CA - certificate authority for client. use root CA as client CA
#  --client-ca-file= (use root CA - ca.pem as client certificate authority (CA))
#    attention: 
#    1. it must be same as flag --cluster-signing-cert-file in controller-manager (use root-CA, ie., ca.pem. also provide 
#    the --cluster-signing-key-file in controller-manager(use roo-CA private key, ie., ca-key.pem).)
#    2. this CA and it private key are also used to certificate tls cert from kubelet and  signed kubelet server cert and client cert
#    (also signed by root-CA, ie., ca-pem, ca-key.pem)
#    3. controller-manager use root-CA to sign kubelet cert (when using bootstrap method to create kubelet cert)
#    4. apiserver use root-CA to cetificate(check) if kubelet cert is signed by root-CA. if kubelet cert is signed by root-CA, then it
#    will pass the certification check
#    5. if set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated 
#    with an identity corresponding to the username of which presented in CN (CommonName) of the client certificate
# 4. etcd CA and cert (client cert)
#  --etcd-cafile=## kube_etcd_ca_file ## - (etcd CA - use root CA (it is a copy of root-CA.))
#  --etcd-certfile=## kube_etcd_cert_file ## - (signed by root-CA, for apiserver to access etcd server as client. cert type: client)
#  --etcd-keyfile=## kube_etcd_key_file ##
#
# 5. service account signing key - it is used to verify ServiceAccount tokens. 
#    1. completed with flag --service-account-private-key-file in controller-manager (used by controller-manager to sign a service account)
#    2. if unspecified, --tls-private-key-file is used.
#    3. MUST be specified when --service-account-signing-key is provided in controller-manager
#  --service-account-key-file=## kube_serviceaccount_cert_file ## - use to sign service account, with CN item for user name of ""
#
# 6. metrics server CA and client cert: 
#  --requestheader-client-ca-file=## kube_ca_file ## - client CA for apiserver to access metrics server as client, use root-CA (ca.pem)
#  --proxy-client-cert-file=## kube_aggregated_apiserver_client_cert_file ## - (signed by root-CA, for apiserver to access metrics server 
#    or other aggregated apiserver as client, cert type: client. CN in cert: "kube-aggregated-apiserver-client")
#  --proxy-client-key-file=## kube_aggregated_apiserver_client_key_file ##

# remark: authorization
#
# 1. cluster wide abac authorization file - static authoriztion file in abac format. need restart apiserver to reload changed abac authorization file.
#  --authorization-policy-file=## kube_abac_config_path ##/abac-auth.json - store in /etc/kubernetes/abac/abac-auth.json file
#
# 2. metrics server (aggregated apiserver) authorize info - for apiserver proxy request to metrics server (put user info in request header)
#  --requestheader-allowed-names="kube-aggregated-apiserver-client" - config metrics server the allowed username (for apiserver to access metrics apiserver. defined in CN item of client cert)
#  --requestheader-group-headers=X-Remote-Group 
#  --requestheader-extra-headers-prefix=X-Remote-Extra- 
#  --requestheader-username-headers=X-Remote-User 
#
# 3. misc authorization flags
#  --authorization-mode=Node,ABAC,RBAC 
#  --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,NodeRestriction
#  --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,Re$
#  --feature-gates=TokenRequest=true \
#  --anonymous-auth=false \

# misc remark:

#  --runtime-config=api/all=true  - enable all version of runtime config
#  --bind-address - can not be 127.0.0.1, or external can not connect with apiserver secure port 6443
#  --token-auth-file=# kube_cert_path #/token.csv - use for token.csv type bootstrp, not use for bootstrap token type auth

Restart=on-failure
RestartSec=5
Type=notify
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
