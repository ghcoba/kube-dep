---

# file: create-kube-dashboard-admin-kubeconfig.yml

# function: create kube-dashboard-admin kubeconfig - for user to use this kubeconfig to
#             login dashboard ui
#   attention: need embed token date of dashboard-admin serviceaccount
#   . get seviceaccount token data and register koken data
#   . create kubeconfig file
#

# get token data of dashboard-admin serviceaccount
- block:

# ref: command line
#        /usr/local/bin/kubectl -n kube-system
#           describe secret
#             $( /usr/local/bin/kubectl -n kube-system
#                 get secret | awk '/^dashboard-admin-token-/{print $1}'
#              )
#           |
#           awk '$1=="token:"{print $2}'

    - name: get token data of dashboard-admin serviceaddcount
      shell: "{{ bin_path }}/kubectl -n kube-system describe secret $({{ bin_path }}/kubectl -n kube-system get secret | awk '/^dashboard-admin-token-/{print $1}') | awk '$1==\"token:\"{print $2}'"
      register: token_data_result

#    - name: get token name of dashboard-admin serviceaccount
#      shell: "{{ bin_path }}/kubectl -n kube-system get secret | awk '/^dashboard-admin-token-/{print $1}'"
#      register: token_name_result
#    - name: get token data of dashboard-admin serviceaccount
#      shell: "{{ bin_path }}/kubectl -n kube-system describe secret {{ token_name_result.stdout }} | awk '$1==\"token:\"{print $2}'"
#      register: token_data_result

    - debug: 
        msg: "toke data: {{ token_data_result.stdout }}"
  rescue:
    - debug:
        msg: "error retrieving token data of serviceaccount dashboard-admin"
# end block




#######################################################################################
### create kubeconfig file for dashboard admin serviceaccount

# generate kube dashboard-admin kubeconfig file

- name: generate kube dashboaord-admin config - set cluster
  command: >
    "{{ bin_path }}"/kubectl config set-cluster kubernetes
      --certificate-authority="{{ kube_ca_file }}"
      --embed-certs=true
      --server="{{ kube_load_balancer_apiserver_url }}"
      --kubeconfig="{{ kube_dashboard_admin_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kube dashboard-admin config - set credential
  command: >
    "{{ bin_path }}"/kubectl config set-credentials dashboard-admin
      --client-certificate="{{ kube_dashboard_admin_cert_file }}"
      --client-key="{{ kube_dashboard_admin_key_file }}"
      --token="{{ token_data_result.stdout }}"
      --embed-certs=true
      --kubeconfig="{{ kube_dashboard_admin_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kube dashboard-admin config - set context
  command: >
    "{{ bin_path }}"/kubectl config set-context dashboard-admin@kubernetes
      --cluster=kubernetes
      --user=dashboard-admin
      --kubeconfig="{{ kube_dashboard_admin_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kube dashboard-admin config - set default context
  command: >
    "{{ bin_path }}"/kubectl config use-context dashboard-admin@kubernetes
      --kubeconfig="{{ kube_dashboard_admin_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

# change kube config file attribute
- name: change file attrib
  file:
    path: "{{ kube_dashboard_admin_config_file }}"
    owner: "{{ kube_user }}"
    group: "{{ kube_group }}"
    mode: 0640

# copy kube config file from node #0 of kube-masters group to ansible backup directory
- name: fetch kube controller-manager config file to ansible backup directory
  fetch:
    src: "{{ kube_dashboard_admin_config_file }}"
    dest: "{{ dep_path_backup_kube_config }}/"
    flat: yes
  run_once: true
