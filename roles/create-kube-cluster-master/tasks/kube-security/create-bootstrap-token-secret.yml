---

# file: create-bootstrap-token-secret.yml
#

#   generate bootstrap token secret yaml file

- name: get expiration time for bootstrap token
  command: "date +'%Y-%m-%dT%H:%M:%SZ' -d '+365 days'"
# register current time variable for calculating expiration - expire in 365 days
  register: tls_bootstrap_token_expiration
#  run_once: true
#  delegate_to: "{{ groups['kube-masters'][0] }}"

- name: generate tls bootstrap token secret file on kube cache
  template:
    src: token/tls-bootstrap-token.yaml.j2
    dest: "{{tls_bootstrap_token_secret_file }}"
#  run_once: true
#  delegate_to: "{{ groups['kube-masters'][0] }}"

##############################################################################################

# create bootstrap secret ( store in etcd ) for bootstrappers to create kubelet boot strap csr

# generate kube config file for every master node
#  command: >
#  #  /usr/local/bin/kubectl create -f /etc/kubernetes/tls-bootstrap-token.yaml
#

- block:
    - name: generate bootstrap token secret
      command: "{{ bin_path }}/kubectl create -f {{ tls_bootstrap_token_secret_file }}"
      register: kubeletbootstrap_write_token_result

  rescue:
    - debug:
        msg: >
          - "1. write. stderr out: {{ kubeletbootstrap_write_token_result.stderr_lines }}"
          - "1. write.  stdout: {{ kubeletbootstrap_write_token_result.stdout }}"
          -  "error occured during write bootstrap token secret"

  always:
    - debug:
        msg: "please check if bootstrap token secret havs been created. using command line: # kubectl get secret bootstrap-token-{{ tls_bootstrap_token_id }}"

    - debug:
        msg: "will continue ..."
