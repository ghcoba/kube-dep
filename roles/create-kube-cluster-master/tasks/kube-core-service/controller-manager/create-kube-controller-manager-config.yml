---

# file: create-kube-controller-manager-config.yml
#

# generate controller-manage config file (set cluster, credential, context, and default context)
# copy to ansible backup
# copy to kube config dir

# generate kube controller-manager config file
- name: generate kube controller-manager config - set cluster
  command: >
    "{{ bin_path }}"/kubectl config set-cluster kubernetes
      --certificate-authority="{{ kube_ca_file }}" 
      --embed-certs=true 
      --server="{{ kube_load_balancer_apiserver_url }}"
      --kubeconfig="{{ kube_controller_manager_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kube controller-manager config - set credential
  command: >
    "{{ bin_path }}"/kubectl config set-credentials system:kube-controller-manager 
      --client-certificate="{{ kube_controller_manager_cert_file }}"
      --client-key="{{ kube_controller_manager_key_file }}"
      --embed-certs=true 
      --kubeconfig="{{ kube_controller_manager_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kube controller-manager config - set context
  command: >
    "{{ bin_path }}"/kubectl config set-context system:kube-controller-manager@kubernetes
      --cluster=kubernetes
      --user=system:kube-controller-manager
      --kubeconfig="{{ kube_controller_manager_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

- name: generate kube controller-manager config - set default context
  command: >
    "{{ bin_path }}"/kubectl config use-context system:kube-controller-manager@kubernetes 
      --kubeconfig="{{ kube_controller_manager_config_file }}"
  args:
    chdir: "{{ kube_config_path }}/"

# change kube config file attribute
- name: change file attrib
  file:
    path: "{{ kube_controller_manager_config_file }}"
    owner: "{{ kube_user }}"
    group: "{{ kube_group }}"
    mode: 0640

# copy kube config file from node #0 of kube-masters group to ansible backup directory
- name: fetch kube controller-manager config file to ansible backup directory
  fetch:
    src: "{{ kube_controller_manager_config_file }}"
    dest: "{{ dep_path_backup_kube_config }}/"
    flat: yes
  run_once: true

